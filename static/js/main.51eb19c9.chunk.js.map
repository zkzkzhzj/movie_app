{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","index","key","App","state","isLoading","movies","getMovies","a","async","axios","get","data","setState","this","name","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"gTAkCeA,MA7Bf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACjD,OACE,yBAAKC,UAAU,SACb,yBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACb,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACXD,EAAOI,KAAI,SAACJ,EAAQK,GAAT,OACV,wBAAIC,IAAKD,EAAOJ,UAAU,iBAAiBD,OAG/C,uBAAGC,UAAU,kBAAkBH,MCkDxBS,G,iNApDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAIVC,UAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAMAE,IAAMC,IACd,0DAPQ,gBAIEL,EAJF,EAGRM,KACEA,KAAQN,OAMZ,EAAKO,SAAS,CAAEP,SAAQD,WAAW,IAVzB,sC,mFAeVS,KAAKP,c,+BAEE,MAEuBO,KAAKV,MAA3BC,EAFD,EAECA,UAAWC,EAFZ,EAEYA,OACnB,OACE,6BAASS,KAAK,aACXV,EACC,yBAAKR,UAAU,UACb,0BAAMA,UAAU,gBAAhB,eAGF,yBAAKA,UAAU,UACZS,EAAON,KAAI,SAAAgB,GAAK,OACf,kBAAC,EAAD,CACEd,IAAKc,EAAMzB,GACXA,GAAIyB,EAAMzB,GACVC,KAAMwB,EAAMxB,KACZC,MAAOuB,EAAMvB,MACbC,QAASsB,EAAMtB,QACfC,OAAQqB,EAAMC,mBACdrB,OAAQoB,EAAMpB,kB,GApDZsB,IAAMC,YCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.51eb19c9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n// state 가 필요없을 경우 함수형으로 생성해도 됨\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie__data\">\r\n        <h3 className=\"movie__title\">{title}</h3>\r\n        <h5 className=\"movie__year\">{year}</h5>\r\n        <ul className=\"genres\">\r\n          {genres.map((genres, index) => (\r\n            <li key={index} className=\"genres__genre\">{genres}</li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie__summary\">{summary}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 사용할 값 타입과 받는지 체크\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n  // 배열 안 값도 이렇게 체크 가능\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n// prop-types, axios 다운로드 npm i ~~\nclass App extends React.Component {\n  // component life cycle\n  /*\n  constructor = 자바스크립트 로딩(first)\n  render = second\n  DidMount = third\n\n  DidUpdate = 업데이트 시\n  DidWillUnMount = 컴포넌트를 떠났을 때(새로고침, 나가기)\n  */\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  // getMovies 에서 데이터를 가져오면 로딩 완료 표시\n  getMovies = async () => {\n    // es6 data 안 data 안 movies\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\n      \"https://yts.lt/api/v2/list_movies.json?sort_by=rating\"\n    );\n    // es6 (movies : movies)\n    this.setState({ movies, isLoading: false });\n  };\n\n  // 랜더가 끝나면 getMovies() 실행\n  componentDidMount() {\n    this.getMovies();\n  }\n  render() {\n    // ES6 문법, this.state 같은 것들 편하게 사용\n    const { isLoading, movies } = this.state;\n    return (\n      <section name=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map(movie => (\n              <Movie\n                key={movie.id}\n                id={movie.id}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                poster={movie.medium_cover_image}\n                genres={movie.genres}\n              />\n            ))}\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDom 이 App 컴포넌트를 id = root 인 엘리먼트에 집어 넣는다\n// 이로 인해 빈 html 을 불러오고 거기에 넣기만 하면되서 속도적으로 빠르다\n// 이게 바로 react 의 일, react 가 빠른 이유\n// virtual 이고 존재하지 않는다!\n\n/*\n클라우드에 올리는 법\nnpm i gh-pages\n허가 모듈\ngh-pages 는 웹 사이트를 github의 github page 도메인에 나타나게 해줌\n\n그다음 package.json 가서 설정\nhttps://zkzkzhzj.github.io/movie_app\n뒤에 프로젝트 이름\nhomepage 속성 추가해주면 됨\n\n그다음으로는 script 를 만드는 것 \nscripts 속성이 있음\ndeploy 추가해주자\n\"deploy\" : \"gh-pages ??\"\n?? 쪽에 들어가는 게 폴더라는데 그걸 만들기 위해서\n\nyarn run build 하면 build 파일이 생긴다\n\"deploy\": \"gh-pages -d build\"\n디렉토리 빌드\n\n그리고 그 아래다 predeploy 해준다\n\"predeploy\": \"npm run build\"\npredeploy 가 먼저 실행되는데 build 해줌으로서 웹 서버 켜지는듯\n\n*/"],"sourceRoot":""}