{"version":3,"sources":["components/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","key","slice","Home","isLoading","movies","getMovies","a","async","axios","get","data","setState","this","movie","medium_cover_image","React","Component","About","props","console","log","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"8XAkEeA,MAhDf,YAA4D,IAA5CC,EAA2C,EAA3CA,GAAIC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,OAAQC,EAAS,EAATA,OAC9C,OACI,yBAAKC,UAAU,SACX,kBAAC,IAAD,CACIC,GAAI,CACAC,SAAS,UAAD,OAAYR,GACpBS,MAAO,CACHR,OACAC,QACAC,UACAC,SACAC,YAGR,yBAAKK,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,iBAEND,EAAOO,KAAI,SAACC,EAAOC,GAAR,OAEP,wBAAIC,IAAKD,EAAOR,UAAU,iBACrBO,OAKjB,uBAAGP,UAAU,kBAAkBH,EAAQa,MAAM,EAAG,KAAhD,WCkBLC,G,iNAnDXR,MAAQ,CACJS,WAAW,EACXC,OAAQ,I,EAEZC,UAAY,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MAOEE,IAAMC,IAAI,6DAPZ,gBAIIL,EAJJ,EAEJM,KACIA,KACIN,OAIZ,EAAKO,SAAS,CAACP,SAAQD,WAAW,IAR1B,sC,mFAWRS,KAAKP,c,+BAEA,MAEuBO,KAAKlB,MAA1BS,EAFF,EAEEA,UAAWC,EAFb,EAEaA,OAClB,OACI,6BAASb,UAAU,aAEXY,EAEQ,yBAAKZ,UAAU,UACX,0BAAMA,UAAU,gBAAhB,eAIJ,yBAAKA,UAAU,UAEPa,EAAOP,KAAI,SAAAgB,GAAK,OACZ,kBAAC,EAAD,CACIb,IAAKa,EAAM5B,GACXA,GAAI4B,EAAM5B,GACVC,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAMC,mBACdxB,OAAQuB,EAAMvB,kB,GAzCvCyB,IAAMC,Y,MCIVC,MAbf,SAAeC,GAEX,OADAC,QAAQC,IAAIF,GAER,yBAAK3B,UAAU,oBACX,8IAIA,8DCiBG8B,E,4LApBU,IAAD,EACYT,KAAKM,MAA1BI,EADS,EACTA,SAAUC,EADD,EACCA,aACMC,IAAnBF,EAAS5B,OACT6B,EAAQE,KAAK,O,+BAGX,IACCH,EAAYV,KAAKM,MAAjBI,SACP,OAAIA,EAAS5B,MACF,8BAAO4B,EAAS5B,MAAMP,OAEtB,S,GAZE4B,IAAMC,W,MCUZU,MATf,WACI,OACI,yBAAKnC,UAAU,OACX,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,W,MCyBGmC,MA1Bf,WACI,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW5B,IACxC,kBAAC,IAAD,CAAO0B,KAAK,SAASE,UAAWb,IAChC,kBAAC,IAAD,CAAOW,KAAK,aAAaE,UAAWT,MCbhDU,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.eaa25383.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n/* \r\nMovie 함수형 컴포넌트에서 props 받고\r\nLink 속성으로 route 간의 props 전달 가능\r\npathname 는 주소값\r\nstate 값에 추가 데이터 넣어줬다\r\n*/\r\n// 링크 자체에 클릭 이벤트가 있는듯 클릭이되네\r\n// 클릭하면 /movie/id 값으로 이동하고 state 에 정보를 담아서 보냄\r\n// 즉 route 의 path 와 같아야 동작을 한다는거네 \r\n// pathname 이 이동할 주소 설정인듯\r\n// 만약 route movies2 라던지 주소가 안맞으면 \r\n// 이동은 하나 아무런 데이터가 표시되지 않는 movie/id~ 웹 페이지가 열린다\r\n// 새로운 화면? 컴포넌트는 되는듯 하다\r\nfunction Movie({id, year, title, summary, poster, genres}) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <Link\r\n                to={{\r\n                    pathname: `/movie/${id}`,\r\n                    state: {\r\n                        year,\r\n                        title,\r\n                        summary,\r\n                        poster,\r\n                        genres\r\n                    }\r\n                }}>\r\n                <img src={poster} alt={title} title={title}/>\r\n                <div className=\"movie__data\">\r\n                    <h3 className=\"movie__title\">{title}</h3>\r\n                    <h5 className=\"movie__year\">{year}</h5>\r\n                    <ul className=\"movie__genres\">\r\n                        {\r\n                            genres.map((genre, index) => (\r\n                              // genres 값 만큼 li 생성\r\n                                <li key={index} className=\"genres__genre\">\r\n                                    {genre}\r\n                                </li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                    <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n// slice 는 string 자르는\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes\r\n        .arrayOf(PropTypes.string)\r\n        // propsTypes 로 배열은 이렇게 체크가능하다!\r\n        .isRequired\r\n};\r\n\r\nexport default Movie;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./Home.css\";\r\n\r\n/* \r\n첫 랜더가 끝나면 getMovies() 를 실행하고\r\n사이트에서 값을 받아오는데 await 로 인해 받아오기 전까지는\r\nsetState 가 동작하지 않는다\r\n모두 받아오면 setState 가 동작하고 로딩이 false 가 되며\r\nMovie 컴포넌트를 불러온다\r\n*/\r\nclass Home extends React.Component {\r\n    state = {\r\n        isLoading: true,\r\n        movies: []\r\n    };\r\n    getMovies = async () => {\r\n        const {\r\n            data: {\r\n                data: {\r\n                    movies\r\n                }\r\n            }\r\n        } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n        this.setState({movies, isLoading: false});\r\n    };\r\n    componentDidMount() {\r\n        this.getMovies();\r\n    }\r\n    render() {\r\n        //es6, this.state.isLoading == isLoading\r\n        const {isLoading, movies} = this.state;\r\n        return (\r\n            <section className=\"container\">\r\n                {\r\n                    isLoading\r\n                        ? (\r\n                            <div className=\"loader\">\r\n                                <span className=\"loader__text\">Loading...</span>\r\n                            </div>\r\n                        )\r\n                        : (\r\n                            <div className=\"movies\">\r\n                                {\r\n                                    movies.map(movie => (\r\n                                        <Movie\r\n                                            key={movie.id}\r\n                                            id={movie.id}\r\n                                            year={movie.year}\r\n                                            title={movie.title}\r\n                                            summary={movie.summary}\r\n                                            poster={movie.medium_cover_image}\r\n                                            genres={movie.genres}/>\r\n                                    ))\r\n                                }\r\n                            </div>\r\n                        )\r\n                }\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About(props) {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"about__container\">\r\n            <span>\r\n                “Freedom is the freedom to say that two plus two make four. If that is granted,\r\n                all else follows.”\r\n            </span>\r\n            <span>− George Orwell, 1984</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\n\r\n// 여기서 전달받은 props 를보면\r\n// location 과 history \r\n// route 에서 Link 로 전달 받은 props 인데\r\n// history 는 주소값 데이터 즉 / 는 초기에 설정한 home 으로 보내버리는 것\r\n// location 에 데이터가 들어있는데 값이없을 경우 보냄\r\nclass Detail extends React.Component {\r\n    componentDidMount() {\r\n        const {location, history} = this.props;\r\n        if (location.state === undefined) {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n    render() {\r\n        const {location} = this.props;\r\n        if (location.state) {\r\n            return <span>{location.state.title}</span>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n// 여기서 왜 체크했냐면 새로고침이나 주소입력으로오면\r\n// 상세정보가 없기때문에 render -> didmount 잖아\r\n// 근데 title 없다고 에러떠서 / 못가기 때문에\r\n// 체크를 해줌\r\n\r\nexport default Detail;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./Navigation.css\";\r\n\r\n// 네비게이션으로 모든 컴포넌트에서 보여진다\r\n// Route 에서는 a 대신 Link 와 to 를 사용해서 props 전달하거나 url 세팅한다\r\n// 또한 router 밖에서 Link 를 쓸수 없다\r\n// HashRouter 밖에 Navigation 쓰게되면 router 밖이되므로 안됨\r\nfunction Navigation() {\r\n    return (\r\n        <div className=\"nav\">\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/about\">About</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./App.css\";\n\n// 라우터는 url 과 매칭해줌\n// 라우터에는 종류가 많은데 깃허브에 올리기에는 해시라우터가 편함\n// 브라우저라우터 라고 있는데 깃허브에 올리려면 설정할게 복잡해서 해시로 자주씀\nfunction App() {\n    return (\n        <HashRouter>\n            <Navigation/>\n            <Route path=\"/\" exact={true} component={Home}/>\n            <Route path=\"/about\" component={About}/>\n            <Route path=\"/movie/:id\" component={Detail}/>\n        </HashRouter>\n    );\n}\n/*\n라우트에 path 는 주소뒤에 붙는 것 component 는 이동할 js\nexact 는 무엇이냐 완전히 주소가 같아야만 이동\n왜 존재하냐면\n/ 과 /about 은 중복될 수 있음\n즉 주소/about 으로 가면 라우터에서 해석하길\n/ 있네? home 키고 /about 도 있네? 둘다 렌더링하자!\n그래서 2개가 렌더링되고 화면에 겹침 이거를 방지하기 위해서\n당연하게도\n/home /about 은 안겹치고 /home /home/about 이런건 겹침\n\n/movie 뒤에 id는 props 를 이용해서 각 무비의 상세 설명 주소\n\nNav 는 모든 화면에서 보임 \n*/\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDom 이 App 컴포넌트를 id = root 인 엘리먼트에 집어 넣는다\n// 이로 인해 빈 html 을 불러오고 거기에 넣기만 하면되서 속도적으로 빠르다\n// 이게 바로 react 의 일, react 가 빠른 이유\n// virtual 이고 존재하지 않는다!\n\n/*\n클라우드에 올리는 법\nnpm i gh-pages\n허가 모듈\ngh-pages 는 웹 사이트를 github의 github page 도메인에 나타나게 해줌\n\n그다음 package.json 가서 설정\nhttps://zkzkzhzj.github.io/movie_app\n뒤에 프로젝트 이름\nhomepage 속성 추가해주면 됨\n\n그다음으로는 script 를 만드는 것 \nscripts 속성이 있음\ndeploy 추가해주자\n\"deploy\" : \"gh-pages ??\"\n?? 쪽에 들어가는 게 폴더라는데 그걸 만들기 위해서\n\nyarn run build 하면 build 파일이 생긴다\n\"deploy\": \"gh-pages -d build\"\n디렉토리 빌드\n\n그리고 그 아래다 predeploy 해준다\n\"predeploy\": \"npm run build\"\npredeploy 가 먼저 실행되는데 build 해줌으로서 웹 서버 켜지는듯\n원리는 안피곤할 때 이해하자\n아무튼 서버 켜진다 깃허브\n\n\n\n새로운걸로 네비게이션을 만든다고 하는데\nreact-router-dom 을 설치한다\n*/"],"sourceRoot":""}